import fnmatch
import os
from pathlib import Path


def generate_output_filenames():
    for filepath in Path.cwd().glob("input.batch_*/*.bam"):
        _, batch = filepath.parent.name.split(".", 1)
        sample = filepath.stem

        for ext in (".bam", ".idxstats.txt", ".stats.txt"):
            yield f"output.{batch}/{sample}{ext}"


rule all:
    input:
        generate_output_filenames()


rule filter_bam:
    input:
        "input.{batch}/{sample}.bam"
    output:
        bam="output.{batch}/{sample}.bam",
        junk="output.{batch}/{sample}.junk.bam",
        json="output.{batch}/{sample}.json"
    threads: 4
    shell:
        """
        python3 ./scripts/finalize_bam.py \
            {input} \
            --threads {threads} \
            --strict-mate-alignments \
            --allow-improper-pairs \
            --min-paired-insert-size 190 \
            --max-paired-insert-size 500 \
            --min-mapped-bases 35 \
            --min-mapped-fraction 0.7 \
            --out-passed {output.bam} \
            --out-failed {output.junk} \
            --out-json {output.json}
        """


rule samtools_stats:
    input:
        "{filename}.bam"
    output:
        "{filename}.stats.txt"
    threads: 3
    shell:
        "samtools stats --threads {threads} {input} > {output}"


rule samtools_idx:
    input:
        "{filename}.bam"
    output:
        "{filename}.bam.bai"
    threads: 3
    shell:
        "samtools index -@ {threads} {input} > {output}"


rule samtools_idxstats:
    input:
        bam="{filename}.bam",
        bai="{filename}.bam.bai"
    output:
        "{filename}.idxstats.txt"
    threads: 3
    shell:
        "samtools idxstats --threads {threads} {input.bam} > {output}"
